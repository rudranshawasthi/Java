package Coding_Ninjas.Prerequisites;
/*
                        Name: Rudransh Awasthi
 */
import java.util.Scanner;

/*
        Oscillating Prices of "Chakri"

        Diwali is here. While everyone here is busy texting "Happy Diwali" wishes to everybody else,
        NinjaCoder has some other plans and wants to earn some money this season.
        Now, the Apex court has allowed the sale of only green crackers this Diwali. Out of all green crackers,
        "Chakri" is most popular. Because of the irregular supply of "Chakri", the price of "Chakri" is oscillating
        daily. NinjaCoder saw a business opportunity in this. He/She got a price list for coming N days from an
        insider in the market union. Prices in the list are for 1 unit of a large packet of "Chakri". Each large
        packet contains 100 units of Chakri.
        Now, due to financial limitations, NinjaCoder can transact only 1 large packet (100 units of "Chakri")
        in the market. You have to tell maximum profit possible, given that he/she can transact atmost one time.
        Note:
        1. Transaction refers to the act of buying and selling.
        2. "Chakri" cannot be sold individually. NinjaCoder has to buy/sell the entire packet.

        Input Format
            First-line contains N - (Integer)
            Second-line contains N spaced integers.
        Constraints
            1 <= N <= 10000
            50 <= A(i) <= 100
        Output Format
            Print the maximum profit that can be generated by NinjaCoder.

        Sample Input 0:
            7
            62 63 70 66 64 68 61
        Sample Output 0:
            8
 */
public class Oscillating_Prices_of_Chakri {
    public static void main(String ar[]){
        Scanner z = new Scanner(System.in);
        int n = z.nextInt();
        int[] arr = new int[n];
        int i,profit,j,min,max;
        for (i = 0;i < n; i++){
            arr[i] = z.nextInt();
        }
        min = arr[n-1];
        max = arr[n-1];
        int maxin = n-1;
        profit = 0;
        for(i = n-1;i>=0;i--) {
            if (arr[i] > max) {
                max = arr[i];
                min = max;
                maxin = i;
            }
            if (arr[i] < min && i < maxin){
                min = arr[i];
            }
            if ((max -min) > profit){
                profit = max-min;
            }
        }
        System.out.print(profit);
    }
}
